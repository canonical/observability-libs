# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.
[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static, unit

[vars]
src_path = {toxinidir}/src
tst_path = {toxinidir}/tests
lib_path = {toxinidir}/lib/charms/observability_libs
all_path = {[vars]src_path} {[vars]tst_path} {[vars]lib_path}
uv_flags = --frozen --isolated --extra=dev

[testenv]
allowlist_externals = uv
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  CHARM_PATH

[testenv:lock]
description = Update uv.lock with the latest deps
commands =
  uv lock --upgrade --no-cache

[testenv:lint]
description = Lint the code
commands =
    uv run {[vars]uv_flags} ruff check {[vars]all_path}

[testenv:static]
description = Run static checks
allowlist_externals =
  {[testenv]allowlist_externals}
  /usr/bin/env
commands =
    uv run {[vars]uv_flags} pyright {[vars]all_path}
    /usr/bin/env sh -c 'for m in $(git diff main --name-only {[vars]lib_path}); do if ! git diff main $m | grep -q "+LIBPATCH\|+LIBAPI"; then echo "You forgot to bump the version on $m!"; exit 1; fi; done'

[testenv:fmt]
description = "Format the code"
commands =
    uv run {[vars]uv_flags} ruff check --fix-only {[vars]all_path}

[testenv:unit]
description = Run unit tests
setenv =
  {[testenv]setenv}
  JUJU_VERSION=3.0.3
passenv = 
    PYTHONPATH
allowlist_externals =
  {[testenv]allowlist_externals}
  mkdir
  sh
commands =
    # Download 3rd party libs our libs depend on
    mkdir -p {toxinidir}/lib/charms/tls_certificates_interface/v2
    sh -c 'stat {toxinidir}/lib/charms/tls_certificates_interface/v2/tls_certificates.py > /dev/null 2>&1 || wget "https://raw.githubusercontent.com/canonical/tls-certificates-interface/main/lib/charms/tls_certificates_interface/v2/tls_certificates.py" -P {toxinidir}/lib/charms/tls_certificates_interface/v2'
    mkdir -p {toxinidir}/lib/charms/tls_certificates_interface/v3
    sh -c 'stat {toxinidir}/lib/charms/tls_certificates_interface/v3/tls_certificates.py > /dev/null 2>&1 || wget "https://raw.githubusercontent.com/canonical/tls-certificates-interface/main/lib/charms/tls_certificates_interface/v3/tls_certificates.py" -P {toxinidir}/lib/charms/tls_certificates_interface/v3'
    # Run the tests
    uv run {[vars]uv_flags} coverage run --source={[vars]src_path},{[vars]lib_path} -m pytest \
        {[vars]tst_path}/unit {posargs}
    uv run {[vars]uv_flags} coverage report

[testenv:integration]
description = Run integration tests
commands =
    uv run {[vars]uv_flags} pytest --exitfirst {[vars]tst_path}/integration {posargs}











; [testenv:unit]
; description = Run unit tests
; deps =
;     pytest
;     coverage[toml]
;     cryptography  # tls_certificates
;     jsonschema  # tls_certificates
;     -r{toxinidir}/requirements.txt
; allowlist_externals =
;     mkdir
;     sh
; commands =
;     # Download 3rd party libs our libs depend on
;     mkdir -p {toxinidir}/lib/charms/tls_certificates_interface/v2
;     sh -c 'stat {toxinidir}/lib/charms/tls_certificates_interface/v2/tls_certificates.py > /dev/null 2>&1 || wget "https://raw.githubusercontent.com/canonical/tls-certificates-interface/main/lib/charms/tls_certificates_interface/v2/tls_certificates.py" -P {toxinidir}/lib/charms/tls_certificates_interface/v2'
;
;     mkdir -p {toxinidir}/lib/charms/tls_certificates_interface/v3
;     sh -c 'stat {toxinidir}/lib/charms/tls_certificates_interface/v3/tls_certificates.py > /dev/null 2>&1 || wget "https://raw.githubusercontent.com/canonical/tls-certificates-interface/main/lib/charms/tls_certificates_interface/v3/tls_certificates.py" -P {toxinidir}/lib/charms/tls_certificates_interface/v3'
;
;     python -m doctest {[vars]lib_path}/v0/kubernetes_compute_resources_patch.py
;     coverage run \
;       --source={[vars]lib_path} \
;       -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/unit
;     coverage report
;
; [testenv:integration]
; description = Run integration tests
; deps =
;     juju ~= 3.1.0
;     # https://github.com/juju/python-libjuju/issues/1184
;     websockets<14
;     lightkube
;     lightkube-models
;     pytest
;     pytest-operator
; commands =
;     pytest -v --tb native --log-cli-level=INFO -s {posargs} {toxinidir}/tests/integration
;
; [testenv:scenario]
; description = Scenario tests (CI satisfaction placeholder)
;
; [testenv:scenario-manual]
; description = Scenario tests (manual only: GH runner does not like charmcraft fetch-lib)
; deps =
;     pytest
;     ops-scenario
;     cryptography
;     jsonschema
;     -r{toxinidir}/requirements.txt
; allowlist_externals =
;     charmcraft
;     rm
; commands =
;     charmcraft fetch-lib charms.tls_certificates_interface.v2.tls_certificates
;     charmcraft fetch-lib charms.tls_certificates_interface.v3.tls_certificates
;     pytest -v --tb native {[vars]tst_path}/scenario --log-cli-level=INFO -s {posargs}
;     rm -rf ./lib/charms/tls_certificates_interface
