# Copyright 2021 Canonical Ltd.
# See LICENSE file for licensing details.
[tox]
skipsdist=True
skip_missing_interpreters = True
envlist = lint, static-{charm,lib,unit,integration}, unit

[vars]
src_path = {toxinidir}/src
tst_path = {toxinidir}/tests
lib_path = {toxinidir}/lib/charms/observability_libs
all_path = {[vars]src_path} {[vars]tst_path} {[vars]lib_path}

[testenv]
basepython = python3
setenv =
  PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
  PYTHONBREAKPOINT=ipdb.set_trace
  PY_COLORS=1
passenv =
  PYTHONPATH
  HOME
  PATH
  CHARM_BUILD_DIR
  MODEL_SETTINGS
  HTTP_PROXY
  HTTPS_PROXY
  NO_PROXY

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    ruff
commands =
    ruff check --fix {[vars]all_path}
    black {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    ruff
    codespell
commands =
    codespell {[vars]lib_path}
    codespell .
    ruff check {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:static-{charm,lib}]
description = Run static analysis checks
deps =
    -r{toxinidir}/requirements.txt
    pyright
commands =
    charm: pyright {[vars]src_path} {posargs}
    lib: pyright --pythonversion 3.8 {[vars]lib_path} {posargs}
    lib: /usr/bin/env sh -c 'for m in $(git diff main --name-only {[vars]lib_path}); do if ! git diff main $m | grep -q "+LIBPATCH\|+LIBAPI"; then echo "You forgot to bump the version on $m!"; exit 1; fi; done'
allowlist_externals = /usr/bin/env

[testenv:unit]
description = Run unit tests
deps =
    pytest
    coverage[toml]
    cryptography  # tls_certificates
    jsonschema  # tls_certificates
    -r{toxinidir}/requirements.txt
allowlist_externals =
    mkdir
    sh
commands =
    # Download 3rd party libs our libs depend on
    mkdir -p {toxinidir}/lib/charms/tls_certificates_interface/v2
    sh -c 'stat {toxinidir}/lib/charms/tls_certificates_interface/v2/tls_certificates.py > /dev/null 2>&1 || wget "https://raw.githubusercontent.com/canonical/tls-certificates-interface/main/lib/charms/tls_certificates_interface/v2/tls_certificates.py" -P {toxinidir}/lib/charms/tls_certificates_interface/v2'

    mkdir -p {toxinidir}/lib/charms/tls_certificates_interface/v3
    sh -c 'stat {toxinidir}/lib/charms/tls_certificates_interface/v3/tls_certificates.py > /dev/null 2>&1 || wget "https://raw.githubusercontent.com/canonical/tls-certificates-interface/main/lib/charms/tls_certificates_interface/v3/tls_certificates.py" -P {toxinidir}/lib/charms/tls_certificates_interface/v3'

    python -m doctest {[vars]lib_path}/v0/kubernetes_compute_resources_patch.py
    coverage run \
      --source={[vars]lib_path} \
      -m pytest -v --tb native --log-cli-level=INFO -s {posargs} {[vars]tst_path}/unit
    coverage report

[testenv:integration]
description = Run integration tests
deps =
    juju
    lightkube
    lightkube-models
    pytest
    pytest-operator
    -r{toxinidir}/requirements.txt
commands =
    pytest -v --tb native --log-cli-level=INFO -s {posargs} {toxinidir}/tests/integration

[testenv:scenario]
description = Scenario tests (CI satisfaction placeholder)

[testenv:scenario-manual]
description = Scenario tests (manual only: GH runner does not like charmcraft fetch-lib)
deps =
    pytest
    ops-scenario
    cryptography
    jsonschema
    -r{toxinidir}/requirements.txt
allowlist_externals =
    charmcraft
    rm
commands =
    charmcraft fetch-lib charms.tls_certificates_interface.v2.tls_certificates
    charmcraft fetch-lib charms.tls_certificates_interface.v3.tls_certificates
    pytest -v --tb native {[vars]tst_path}/scenario --log-cli-level=INFO -s {posargs}
    rm -rf ./lib/charms/tls_certificates_interface
